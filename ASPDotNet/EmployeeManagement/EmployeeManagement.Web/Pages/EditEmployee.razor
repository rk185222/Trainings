@page "/editemployee/{id}"
@page "/editemployee"

@using AutoMapper;
@using EmployeeManagement.Web.Models;
@using Microsoft.AspNetCore.Components;

<EditForm Model="@EditEmployeeModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h3>Edit Employee</h3>
    <hr />
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">
            First Name
        </label>
        <div class="col-sm-10">
            <input id="firstName" class="form-control" placeholder="First Name"
                       @bind="EditEmployeeModel.FirstName" />
            @*            <InputText id="firstName" class="form-control" placeholder="First Name"
            @bind-Value="EditEmployeeModel.FirstName" />*@
            <ValidationMessage For="@(() => EditEmployeeModel.FirstName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="lastName" class="col-sm-2 col-form-label">
            Last Name
        </label>
        <div class="col-sm-10">
            <InputText id="lastName" class="form-control" placeholder="Last Name"
                       @bind-Value="EditEmployeeModel.LastName" />
            <ValidationMessage For="@(() => EditEmployeeModel.LastName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="email" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-10">
            <InputText id="email" class="form-control" placeholder="Email"
                       @bind-Value="EditEmployeeModel.Email" />
            <ValidationMessage For="@(()=>EditEmployeeModel.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="confirmEmail" class="col-sm-2 col-form-label">
            Confirm Email
        </label>
        <div class="col-sm-10">
            <InputText id="confirmEmail" class="form-control"
                       @bind-Value="EditEmployeeModel.ConfirmEmail" />
            <ValidationMessage For="@(() => EditEmployeeModel.ConfirmEmail)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="department" class="col-sm-2 col-form-label">
            Department
        </label>
        <div class="col-sm-10">
            <CustomInputSelect id="department" @bind-Value="EditEmployeeModel.DepartmentId" class="form-control">
                @foreach (var dept in Departments)
                {
                    <option value="@dept.DepartmentId">@dept.DepartmentName</option>
                }
            </CustomInputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="gender" class="col-sm-2 col-form-label">
            Gender
        </label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="EditEmployeeModel.Gender" class="form-control">
                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                {
                    <option value="@gender">@gender</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="dateOfBirth" class="col-sm-2 col-form-label">
            Date Of Birth
        </label>
        <div class="col-sm-10">
            <InputDate @bind-Value="EditEmployeeModel.DateOfBrith" class="form-control" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Submit</button>
    @if(EditEmployeeModel.EmployeeId !=0 )
    {
        <button class="btn btn-primary" type="button" @onclick="Delete_Click">Delete</button>
    }
</EditForm>

@code{

    public Employee Employee { get; set; } = new Employee();

    public EditEmployeeModel EditEmployeeModel { get; set; } = new EditEmployeeModel();

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    [Inject]
    public IDepartmentService DepartmentService { get; set; }

    [Inject]
    public IMapper Mapper { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string Id { get; set; }

    public List<Department> Departments { get; set; } = new List<Department>();


    protected async override Task OnInitializedAsync()
    {
        int.TryParse(Id, out int employeeId);

        if (employeeId != 0)
        {
            Employee = await EmployeeService.GetEmployee(int.Parse(Id));
        }
        else
        {
            Employee = new Employee
                {
                    DepartmentId = 1,
                    DateOfBrith = DateTime.Now,
                    PhotoPath = "images/nophoto.jpg"
                };
        }
        Departments = (await DepartmentService.GetDepartments()).ToList();
        Mapper.Map(Employee, EditEmployeeModel);
    }

    private async Task HandleValidSubmit()
    {
        Mapper.Map(EditEmployeeModel, Employee);
        HttpResponseMessage result;

        if (Employee.EmployeeId != 0)
        {
            result = await EmployeeService.UpdateEmployee(Employee);
        }
        else
        {
            result = await EmployeeService.CreateEmployee(Employee);
        }

        if (result != null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    protected async Task Delete_Click()
    {
        await EmployeeService.DeleteEmployee(Employee.EmployeeId);
        NavigationManager.NavigateTo("/");
    }
}