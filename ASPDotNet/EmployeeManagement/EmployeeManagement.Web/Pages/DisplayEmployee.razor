
<div class="card m-3" style="min-width: 18rem; max-width:30.5%;">
    <div class="card-header">
        <h3>
            <input type="checkbox" @onchange="CheckBoxChanged" />
            @Employee.FirstName @Employee.LastName
        </h3>
    </div>
    <img class="card-img-top imageThumbnail" src="@Employee.PhotoPath" />

    @if(ShowFooter)
    {
        <div class="card-footer text-center">
            <a href="@($"employeedetails/{Employee.EmployeeId}")" class="btn btn-primary m-1">View</a>

            <a href="@($"editemployee/{Employee.EmployeeId}")" class="btn btn-primary m-1">Edit</a>

            <a href="#" class="btn btn-danger m-1" @onclick="Delete_Click">Delete</a>
        </div>
    }

</div>
<Confirm ConfirmationChanged="ConfirmDelete_Click" @ref="DeleteConfirmation"
         ConfirmationMessage=@($"Are you sure you want to delete \"{Employee.FirstName}\"")></Confirm>

@code{
    [Parameter]
    public Employee Employee { get; set; }

    [Parameter]
    public bool ShowFooter { get; set; }

    [Parameter]
    public EventCallback<bool> OnEmployeeSelection { get; set; }

    [Inject]
    public IEmployeeService EmployeeService { get; set; }

    public bool IsSelected { get; set; }

    [Parameter]
    public EventCallback<int> OnEmployeeDeleted { get; set; }

    EmployeeManagement.Components.Confirm DeleteConfirmation { get; set; }

    protected async Task CheckBoxChanged(ChangeEventArgs e)
    {
        IsSelected = (bool)e.Value;
        await OnEmployeeSelection.InvokeAsync(IsSelected);
    }

    private async void Delete_Click()
    {
        DeleteConfirmation.Show();
    }

    private async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await EmployeeService.DeleteEmployee(Employee.EmployeeId);
            await OnEmployeeDeleted.InvokeAsync(Employee.EmployeeId);
        }
    }
}
